apply plugin: 'com.android.application'
apply plugin: 'de.bitdroid.jaxrs2retrofit'

import de.bitdroid.jaxrs2retrofit.converter.IgnoreConverter
import com.squareup.javapoet.ClassName
import io.dropwizard.auth.Auth

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'de.bitdroid.jaxrs2retrofit:plugin:0.4.1'
        classpath 'io.dropwizard:dropwizard-auth:0.8.1'
    }
}

def generatedSourcesDir = file('src/main/java-gen')
def mainSourcesDir = file('src/main/java')

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    defaultConfig {
        applicationId "de.fau.cs.mad.fablab.android"
        minSdkVersion 14
        targetSdkVersion 22
        versionCode 2
        versionName "1.1"
    }
    signingConfigs {
        release {
            storeFile file("unknown")
            storePassword "unknown"
            keyAlias "unknown"
            keyPassword "unknown"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "api_url", "https://ec2-52-28-16-59.eu-central-1.compute.amazonaws.com:4433"

            signingConfig signingConfigs.release
        }

        debug {
            resValue "string", "api_url", "https://ec2-52-28-16-59.eu-central-1.compute.amazonaws.com:4433"
        }
    }

    productFlavors {
        googleplay {

        }

        fdroid {

        }
    }

    sourceSets {
        main {
            java {
                srcDir mainSourcesDir
                srcDir generatedSourcesDir
            }
            res.srcDirs = ['src/main/res', 'src/main/res/values-v19', 'src/main/res/layout-land']
        }
    }
}

preBuild.dependsOn(":../fablab-common:build")

dependencies {
    compile files('../../fablab-common/build/libs/fablab-common-1.0.jar')

    // Android support library
    compile "com.android.support:support-v4:22.2.1"
    compile "com.android.support:appcompat-v7:22.2.1"
    compile 'com.android.support:cardview-v7:22.2.1'
    compile "com.android.support:recyclerview-v7:22.2.1"
    compile "com.android.support:support-annotations:22.2.1"
    compile "com.android.support:design:22.2.1"

    // Dependency injection
    compile 'com.squareup.dagger:dagger:1.2.2'
    provided 'com.squareup.dagger:dagger-compiler:1.2.2'
    compile 'com.jakewharton:butterknife:7.0.1'

    // REST client
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.4.0'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.squareup.okio:okio:1.4.0'
    compile 'com.squareup.retrofit:converter-jackson:1.9.0'

    // ORM
    compile 'com.j256.ormlite:ormlite-core:4.48'
    compile 'com.j256.ormlite:ormlite-android:4.48'
    compile 'javax.persistence:persistence-api:1.0'

    compile 'com.github.pedrovgs:renderers:2.0.3'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'de.greenrobot:eventbus:2.4.0'

    // Push
    googleplayCompile 'com.google.android.gms:play-services:3.1.59'
    googleplayCompile 'com.fasterxml.jackson.core:jackson-databind:2.6.1'

    // UI
    compile 'com.github.brnunes:swipeablerecyclerview:1.0.1'
    compile 'com.github.clans:fab:1.5.5'
    compile 'com.github.machinarius:preferencefragment:0.1.1'
    compile 'com.sothree.slidinguppanel:library:3.1.1'
    compile 'de.hdodenhof:circleimageview:1.3.0'
    compile 'me.dm7.barcodescanner:zxing:1.8.2'
    compile 'xyz.danoz:recyclerviewfastscroller:0.1.3'

    // InventoryItem
    compile 'joda-time:joda-time:2.2'
}

allprojects {
    afterEvaluate { project ->
        def propsFile = rootProject.file('keystore.properties')
        def configName = 'release'

        if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
            def props = new Properties()
            props.load(new FileInputStream(propsFile))
            android.signingConfigs[configName].storeFile = file(props['storeFile'])
            android.signingConfigs[configName].storePassword = props['storePassword']
            android.signingConfigs[configName].keyAlias = props['keyAlias']
            android.signingConfigs[configName].keyPassword = props['keyPassword']
        }
    }
}

afterEvaluate {
    project.tasks.matching { it.name.startsWith('jaxRs2Retrofit') }.each {
        it.inputDir = file(project(':../fablab-common').projectDir.toString() + '/src/main/java')
        it.outputDir = generatedSourcesDir
        it.packageName = 'de.fau.cs.mad.fablab.rest.myapi'
        it.excludedClassNamesRegex = "MyHiddenResource"
        it.generateSynchronousMethods = false
        it.generateCallbackMethods = true
        it.generateRxJavaMethods = false
        it.paramConverterManager.registerConverter(ClassName.get(Auth.class), new IgnoreConverter());

    }
}

